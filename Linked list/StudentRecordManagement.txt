import java.util.Scanner;

/**
 * Singly Linked List for Student Record Management.
 * Implements add, delete, search, display, and update operations.
 * Follows LinkedList best practices: head management, null checks, efficient insertion/deletion.
 * Guideline #11: Documented behavior.
 */
public class StudentRecordManagement {
    static class Node {
        int rollNumber;
        String name;
        int age;
        char grade;
        Node next;

        Node(int rollNumber, String name, int age, char grade) {
            this.rollNumber = rollNumber;
            this.name = name;
            this.age = age;
            this.grade = grade;
            this.next = null;
        }
    }

    private Node head;

    public StudentRecordManagement() {
        this.head = null;
    }

    // Add at beginning: O(1)
    public void addAtBeginning(int rollNumber, String name, int age, char grade) {
        Node newNode = new Node(rollNumber, name, age, grade);
        newNode.next = head;
        head = newNode;
    }

    // Add at end: O(n)
    public void addAtEnd(int rollNumber, String name, int age, char grade) {
        Node newNode = new Node(rollNumber, name, age, grade);
        if (head == null) {
            head = newNode;
            return;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
    }

    // Add at position: O(n)
    public void addAtPosition(int rollNumber, String name, int age, char grade, int position) {
        if (position < 1) {
            System.out.println("Invalid position");
            return;
        }
        if (position == 1) {
            addAtBeginning(rollNumber, name, age, grade);
            return;
        }
        Node newNode = new Node(rollNumber, name, age, grade);
        Node current = head;
        for (int i = 1; i < position - 1 && current != null; i++) {
            current = current.next;
        }
        if (current == null) {
            System.out.println("Position out of bounds");
            return;
        }
        newNode.next = current.next;
        current.next = newNode;
    }

    // Delete by roll number: O(n)
    public void deleteByRollNumber(int rollNumber) {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        if (head.rollNumber == rollNumber) {
            head = head.next;
            return;
        }
        Node current = head;
        while (current.next != null && current.next.rollNumber != rollNumber) {
            current = current.next;
        }
        if (current.next == null) {
            System.out.println("Roll Number not found");
            return;
        }
        current.next = current.next.next;
    }

    // Search by roll number: O(n)
    public Node searchByRollNumber(int rollNumber) {
        Node current = head;
        while (current != null) {
            if (current.rollNumber == rollNumber) {
                return current;
            }
            current = current.next;
        }
        return null;
    }

    // Update grade by roll number: O(n)
    public void updateGrade(int rollNumber, char newGrade) {
        Node node = searchByRollNumber(rollNumber);
        if (node == null) {
            System.out.println("Roll Number not found");
            return;
        }
        node.grade = newGrade;
        System.out.println("Grade updated for Roll Number " + rollNumber);
    }

    // Display all records: O(n)
    public void displayRecords() {
        if (head == null) {
            System.out.println("No records to display");
            return;
        }
        Node current = head;
        System.out.println("Student Records:");
        while (current != null) {
            System.out.printf("Roll: %d, Name: %s, Age: %d, Grade: %c\n",
                    current.rollNumber, current.name, current.age, current.grade);
            current = current.next;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        StudentRecordManagement list = new StudentRecordManagement();

        while (true) {
            System.out.println("\n1. Add at Beginning\n2. Add at End\n3. Add at Position\n" +
                    "4. Delete by Roll Number\n5. Search by Roll Number\n6. Update Grade\n" +
                    "7. Display Records\n8. Exit");
            System.out.print("Choose option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter Roll Number: ");
                    int roll = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter Age: ");
                    int age = scanner.nextInt();
                    System.out.print("Enter Grade: ");
                    char grade = scanner.next().charAt(0);
                    list.addAtBeginning(roll, name, age, grade);
                    break;
                case 2:
                    System.out.print("Enter Roll Number: ");
                    roll = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter Name: ");
                    name = scanner.nextLine();
                    System.out.print("Enter Age: ");
                    age = scanner.nextInt();
                    System.out.print("Enter Grade: ");
                    grade = scanner.next().charAt(0);
                    list.addAtEnd(roll, name, age, grade);
                    break;
                case 3:
                    System.out.print("Enter Roll Number: ");
                    roll = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter Name: ");
                    name = scanner.nextLine();
                    System.out.print("Enter Age: ");
                    age = scanner.nextInt();
                    System.out.print("Enter Grade: ");
                    grade = scanner.next().charAt(0);
                    System.out.print("Enter Position: ");
                    int pos = scanner.nextInt();
                    list.addAtPosition(roll, name, age, grade, pos);
                    break;
                case 4:
                    System.out.print("Enter Roll Number: ");
                    roll = scanner.nextInt();
                    list.deleteByRollNumber(roll);
                    break;
                case 5:
                    System.out.print("Enter Roll Number: ");
                    roll = scanner.nextInt();
                    Node node = list.searchByRollNumber(roll);
                    if (node != null) {
                        System.out.printf("Found: Roll: %d, Name: %s, Age: %d, Grade: %c\n",
                                node.rollNumber, node.name, node.age, node.grade);
                    } else {
                        System.out.println("Roll Number not found");
                    }
                    break;
                case 6:
                    System.out.print("Enter Roll Number: ");
                    roll = scanner.nextInt();
                    System.out.print("Enter New Grade: ");
                    grade = scanner.next().charAt(0);
                    list.updateGrade(roll, grade);
                    break;
                case 7:
                    list.displayRecords();
                    break;
                case 8:
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option");
            }
        }
    }
}